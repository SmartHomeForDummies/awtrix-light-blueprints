blueprint:
  name: Awtrix Fenster Status bei Regen.
  description: "## Zeigt die Anzahl und oder die Namen der offener Fenster auf der Awtrix/Ulanzi an. \U0001F327 \U0001FA9F \n
  Die App wird aktiviert sobald es beginnt zu regnen und mindestens 1 Fenster geöffnet ist.\n
  Oder Während es bereits regnet und mindestens ein Fenster geöffnet wird. Beendet wir die App,\n
  wenn es entweder aufhört zu regnen oder alle Fenster geschlossen werden während es noch regnet.\n
  ### *Voraussetzungen:*\n
  - Fenster Gruppe: Eine binary_sensor Gruppe wurde erstellt, welche alle zu überwachende Fenster beinhaltet.\n   
  - Regen Sensor: Ein Regen Sensor (binary_senor), sollte keiner zur Verfügung stehnen, könnt ihr euch auf Basis\n
  einen Reggenmengen Sensors oder des Wetter Sensore inen Template Sensor erstellen.\n
  - Das verwendete ICON mit der Icon ID: 1819 findet verwendung. \U0001F4A7 Diese herunterladen und in water.gif umbennenen.\n
    ℹ️ Version: v.1.1"
  source_url: https://github.com/SmartHomeForDummies/awtrix-light-blueprints/blob/main/awtrix_fenster_status_bei_regen.yaml
  domain: automation
  author: SmartHome for Dummies
  input:
    awtrix_display:
      name: Awtrix Display
      description: Wähle das Awtrix display aus.
      selector:
        device:
          filter:
          - manufacturer: Blueforcer
          multiple: false
    rain_sensor:
      name: Regen Sensor
      description: Wähle einen Regen Sensor, der die App ein- oder ausschaltet.
      selector:
        entity:
          filter:
            - domain: binary_sensor
    window_group:
      name: Fenster Gruppe
      description: Wähle die Fenster Sensor Gruppe aus.
      selector:
        entity:
          filter:
            - domain: binary_sensor
    show_counter:
      name: Zeige die Anzahl der geöffneten Fenster an.
      description: Soll die Anzahl der geöffneten Fenste angezeigt werden?
      selector:
        boolean:
      default: true
    show_name:
      name: Zeige die geöffneten Fenster an.
      description: Sollen die Namen der geöffneten Fenster angezeigt werden?
      selector:
        boolean:
      default: true
    push_icon:
      name: Push Icon
      description: Icon verhalten
      selector:
        select:
          options:
            - label: "Das Icon bewegt sich nicht"
              value: "0"
            - label: "Das Icon bewegt sich mit dem Text und wird nicht mehr angezeigt"
              value: "1"
            - label: "Das Icon bewegt sich mit dem Text, erscheint aber wieder, wenn der Text neu beginnt"
              value: "2"
          mode: dropdown
      default: "2"
    text_case:
      name: Text Ausgabe
      description: Wählen aus, wie der Text angezeigt werden soll.
      selector:
        select:
          options:
            - label: "Globale Einstellung verwenden"
              value: "0"
            - label: "Alles in Großbuchstaben"
              value: "1"
            - label: "Anzeigen, wie eingegeben"
              value: "2"
          mode: dropdown
      default: "0"
    background_color:
      name: Hintergrundfarbe
      description: Wählen die Hintergrundfarbe aus.
      selector:
        color_rgb:
      default: [0, 0, 0]
    text_color:
      name: Textfarbe
      description: Wähle die Textfarbe aus.
      selector:
        color_rgb:
      default: [255, 255, 255]
    show_rainbow:
      name: Regenbogenfarben
      description: Soll die Benachrichtigung in Regenbogenfarben angezeigt werden?
      selector:
        boolean:
      default: false
    duration:
      name: Dauer (in Sekunden)
      description: Legt fest, wie lange die App angezeigt werden soll. 0 ist die globale App-Zeit.
      default: "0"
    lifetime:
      name: Lebensdauer (in Sekunden)
      description: Legt fest, wie lange die App aktiv bleiben soll, bevor sie automatisch aus dem App-Zyklus entfernt wird. 0 ist eine unendliche Lebensdauer.
      default: "0"

mode: queued

trigger:
  - platform: state
    entity_id: !input rain_sensor
    from: "off"
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input window_group
    from: "off"
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input rain_sensor
    from: "on"
    to: "off"
    id: "Off"
  - platform: state
    entity_id: !input window_group
    from: "on"
    to: "off"
    id: "closed"

variables:
  device_id: !input awtrix_display
  my_display: |
    {{ iif( device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name') ) }}
  window_group: !input window_group
  push_icon: !input push_icon
  text_case: !input text_case
  show_rainbow: !input show_rainbow
  background_color: !input background_color
  text_color: !input text_color
  my_toggle_helper: toggle_helper
  my_duration: !input duration
  show_counter: !input show_counter
  show_name: !input show_name
  counter: |
    {{ expand(window_group)|selectattr('state','eq','on') | list|count }}
  list: |
    {{ expand(window_group)|selectattr('state','eq','on')|map(attribute='name')|list|join(',  ') | replace("Fenster", "") }}
  my_text: |
    {%- if (show_counter) -%}
      {{ ' ' }}{{ counter }}{{' '}}{{'Fenster sind geöffnet'}} 
    {%- endif -%}
    {%- if (show_name) -%}
    {{ ' - ' }}{{list}}
    {%- endif -%}
  my_lifetime: !input lifetime
  app_name: |
    {{ 'fenster_offen_regen' }}

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "On"
          - condition: state
            entity_id: !input window_group
            state: "on"
          - condition: state
            entity_id: !input rain_sensor
            state: "on"
        sequence:
          - service: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: "{{my_display}}/custom/{{app_name}}"
              payload: |-
                {   
                  "text": "{{ my_text }}",
                  "color": {{text_color}},
                  "background": {{ background_color }},
                  "icon": "water",
                  "textCase": {{ text_case }},
                  "pushIcon": {{ push_icon }},
                  "rainbow": {{ iif(show_rainbow, "true", "false") }},
                  "duration": {{ my_duration }},
                  "lifetime": {{ my_lifetime }}
                }
          - service: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: "{{my_display}}/switch"
              payload: |-
                {   
                  "name": "{{app_name}}"
                }
      - conditions:
          - condition: trigger
            id: "Off"
          - condition: state
            entity_id: !input rain_sensor
            state: "off"
        sequence:
          - service: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: "{{my_display}}/custom/{{app_name}}"
      - conditions:
          - condition: trigger
            id: "closed"
        sequence:
          - service: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: "{{my_display}}/custom/{{app_name}}"

